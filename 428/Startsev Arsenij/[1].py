import random
from datetime import datetime
#–∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ(–≤ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –∑–∞–¥–∞–Ω–∏–∏):
# 1.–ø—Ä–µ–¥–º–µ—Ç—ã –≤ —à–∫–æ–ª—å–Ω–æ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ç–µ (–Ω–µ –º–µ–Ω—å—à–µ 14), –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å (dictionary) –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏:
grades_in_certificate = {
    "–∞–ª–≥–µ–±—Ä–∞": 3,
    "—Ö–∏–º–∏—è": 3,
    "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": 5,
    "–±–∏–æ–ª–æ–≥–∏—è": 4,
    "–∏—Å—Ç–æ—Ä–∏—è": 5,
    "—Ñ–∏–∑–∏–∫–∞": 3,
    "–≥–µ–æ–º–µ—Ç—Ä–∏—è": 3,
    "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞": 5,
    "–æ–±–∂": 5,
    "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": 5,
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": 3,
    "—á–µ—Ä—á–µ–Ω–∏–µ": 4,
    "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ": 5,
    "–º—É–∑—ã–∫–∞": 5}

#–ø–æ–ª–Ω–æ–µ –∏–º—è —Å —Ñ–∞–º–∏–ª–∏–µ–π –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∞–∫—Ç–µ—Ä–∞ –∏–∑ –≤–µ—Å—Ç–µ—Ä–Ω–∞ 1960—Ö –≥–æ–¥–æ–≤ –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ (tuple):
#–∞–∫—Ç–µ—Ä: –ö–ª–∏–Ω(–∏–ª–∏ –ö–ª–∏–Ω—Ç–æ–Ω) –ò—Å—Ç–≤—É–¥ (31.05.1930)
Western_actor_birthday = datetime(1930, 5, 31)
Western_actor = ("Clinton", "Eastwood", (Western_actor_birthday.year, Western_actor_birthday.month, Western_actor_birthday.day)) 

#—Å–ø–∏—Å–æ–∫ (list) –∏–∑ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω–æ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:
#–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥
popular_names = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ò–≤–∞–Ω', '–°–µ—Ä–≥–µ–π', '–î–º–∏—Ç—Ä–∏–π', '–ê–ª–µ–∫—Å–µ–π','–ê–Ω–¥—Ä–µ–π', '–ú–∞–∫—Å–∏–º', '–ï–≤–≥–µ–Ω–∏–π', '–ú–∏—Ö–∞–∏–ª', '–í–ª–∞–¥–∏–º–∏—Ä']
popular_surnames = ['–ò–≤–∞–Ω–æ–≤', '–°–º–∏—Ä–Ω–æ–≤','–ü–µ—Ç—Ä–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–í–æ–ª–∫–æ–≤', '–°–æ–∫–æ–ª–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤', '–ë–µ–ª–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤']
names_list = [(name, surname) for name in popular_names for surname in popular_surnames]
random.shuffle(names_list)

#–∏–º—è –∏–∑ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –±—ã –¥–∞–ª–∏ —Å–≤–æ–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É —Ç–∞–º–∞–Ω–¥—É–∞:
tamandya_name = "–≤–æ–ª—å–Ω—ã–π –±—Ä–æ–¥—è–≥–∞" 
#–∫–æ–Ω–µ—Ü –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
    
    #–ª–µ—Ç–∏–º –¥–∞–ª—å—à–µ üöÄ

#–¥–µ–π—Å—Ç–≤–∏—è:
#—Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–µ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏(1,3,4 –∑–∞–¥–∞–Ω–∏—è):
#—Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∞ –≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–µ(–∑–∞–¥–∞–Ω–∏–µ 1):
sred_znach = sum(grades_in_certificate.values()) / len(grades_in_certificate) 
print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–µ: {sred_znach}")

#–æ–±—â–∞—è –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤(3 –∑–∞–¥–∞–Ω–∏–µ):
dlina = sum(len(grades_in_certificate) for grades_in_certificate in grades_in_certificate)
print(f"–û–±—â–∞—è –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {dlina}")

#—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤(4 –∑–∞–¥–∞–Ω–∏–µ):
unical_bykvi = set("".join(grades_in_certificate.keys()))
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {unical_bykvi}")

    #–ª–µ—Ç–∏–º –¥–∞–ª—å—à–µ üöÄ

#—Ä–∞–±–æ—Ç–∞ —Å –∏–º–µ–Ω–∞–º–∏ (2,5,6,8)
#–≤—ã–≤–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Å—Ä–µ–¥–∏ –≤–∑—è—Ç—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö(2 –∑–∞–¥–∞–Ω–∏–µ):
print("–°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π:", names_list)
unique_names = list(set([name for name, _ in names_list]))
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞: {unique_names}")

#–∏–º—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Ç–∞–º–∞–Ω–¥—É–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ (5 –∑–∞–¥–∞–Ω–∏–µ)
binary_tamandya_name = "".join(format(ord(char), '08b') for char in tamandya_name)
print(f"–ò–º—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Ç–∞–º–∞–Ω–¥—É–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ: {binary_tamandya_name}")

#–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–∞ –≤–µ—Å—Ç–µ—Ä–Ω–∞ –¥–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
days_since_birth = (datetime.now() - Western_actor_birthday).days
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: {days_since_birth}")

#–∑–∞–º–µ–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–º–µ–Ω–∏ –Ω–∞ –∏–º—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–ª—É—á–∏–ª–æ—Å—å 51, –¶–∑–∏ –Æ–π (–Ω—É –µ—Å—Ç—å —à–∞–Ω—Å —á—Ç–æ —è –ø–æ—Å—Ç–∏—Ç–∞–ª –ø–ª–æ—Ö–æ))(8 –∑–∞–¥–∞–Ω–∏–µ)
index = int(input("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∏–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ –∏–º—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞: "))
names_list.sort()
names_list[index] = ("–¶–∑–∏", "–Æ–π")
print(f"–ò–º—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∏–Ω–∞—Å—Ç–∏–∏ –ß–∂–æ—É –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –∏–º—ë–Ω: {names_list[index]}")
print("–°–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–∞ –∏–º—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞", names_list)


    #–ª–µ—Ç–∏–º –¥–∞–ª—å—à–µ üöÄ

# FIFO –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (7 –∑–∞–¥–∞–Ω–∏–µ)
class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        return None

    def size(self):
        return len(self.items)

    def get_all_items(self):
        return self.items

def main():
    queue = Queue()
    print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '—Å—Ç–æ–ø'): ")
    
    while True:
        item = input()
        if item.lower() == '—Å—Ç–æ–ø':
            break
        queue.enqueue(item)
    
    print("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ")
    for material in queue.get_all_items():
        print(material)

if __name__ == "__main__":
    main()

#—Å–æ–∑–¥–∞—Ç—å –∏ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º 
#(–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –∏–º—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ -- —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞), 
#—É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ –≤–≤–µ–¥–µ–Ω–æ–º—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏—é, –≤—Å—Ç–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ "–ö–æ–Ω–µ—Ü" –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ—Å—Ç–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É
#–∑–∞–¥–∞–Ω–∏–µ 9
class Node:
    def __init__(self, name):
        self.name = name
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, name):
        new_node = Node(name)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    def remove(self, name):
        current = self.head
        prev = None
        while current and current.name != name:
            prev = current
            current = current.next
        if not current:
            print(f"–≠–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if not prev:
            self.head = current.next
        else:
            prev.next = current.next
        print(f"–≠–ª–µ–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º {name} —É–¥–∞–ª–µ–Ω.")

    def insert(self, index, name):
        new_node = Node(name)
        if index == 0:
            new_node.next = self.head
            self.head = new_node
            return
        current = self.head
        for i in range(index - 1):
            if not current.next:
                break
            current = current.next
        new_node.next = current.next
        current.next = new_node

    def print_list(self):
        current = self.head
        while current:
            print(current.name)
            current = current.next

def main():
    ll = LinkedList()
    places = ["–ë–æ–ª–æ—Ç–Ω–∞—è –†–æ–≥–∞–≤–∫–∞", "–•—Ä–µ–Ω–æ–≤–æ–µ", "–ö—Ä–∞—Å–Ω–∞—è –ú–æ–≥–∏–ª–∞", "–ù–æ–≤—ã–µ –ê–ª–≥–∞—à–∏", "–ù–æ–≤–æ–ø–æ–∑–æ—Ä–Ω–æ–≤–æ", "–õ–æ–º–∫–∏", "–î–Ω–æ", "–ö–æ–∫–∞–∏–Ω–æ–≤—ã–µ –≥–æ—Ä—ã"]
    for place in places:
        ll.append(place)
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:")
    ll.print_list()
    
    name_to_remove = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    ll.remove(name_to_remove)
    
    print("\n–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    ll.print_list()
    
    index_to_insert = int(input("\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ '–ö–æ–Ω–µ—Ü': "))
    ll.insert(index_to_insert, "–ö–æ–Ω–µ—Ü")
    
    print("\n–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ '–ö–æ–Ω–µ—Ü':")
    ll.print_list()

if __name__ == "__main__":
    main()