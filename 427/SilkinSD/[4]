from math import sqrt,degrees,atan2
from random import uniform

class FlyingObject:
    def __init__(self,coords,velocity_components):
        self.x, self.y , self.z = coords
        self.vx,self.vy,self.vz = velocity_components
    def fly(self,time):
        self.x += self.vx * time
        self.y += self.vy * time


class Radar:
    __instance = None

   def __new__(cls,coords):
        if Radar._instance == None:
            cls._instance = super(Radar, cls).__new__(cls)
            cls._instance.x, cls._instance.y, cls._instance.z = coords
        return cls._instance
    def get_position(self, obj: FlyingObject):
        res_x = obj.x - self.x
        res_y = obj.y - self.y
        res_z = obj.z - self.z
        return res_x, res_y, res_z
        
    def transformaton_to_spherical_coords(self, obj: FlyingObject):
        res_x, res_y, res_z = self.get_position(obj)
        rad = sqrt(res_x**2+res_y**2+res_z**2)
        phi = degrees(atan2(res_z, sqrt(res_x ** 2 + res_y ** 2)))
        tetta = degrees(atan2(res_y, res_x))
        return rad,phi,tetta

def move_object(object, time):
    object.cartesian_coordinate.x += object.velocity[0] * time
    object.cartesian_coordinate.y += object.velocity[1] * time
    object.cartesian_coordinate.z += object.velocity[2] * time
    object.spherical_coordinate = cartesian_to_spherical(object.cartesian_coordinate)

radar_cartesian_coordinate = CartesianCoordinate(float(input("Введите x-координату радара (м): ")), float(input("Введите y-координату радара (м): ")), float(input("Введите z-координату радара (м): ")))
num_objects = int(input("Введите количество летающих объектов: "))
objects = []
for i in range(num_objects):
    x, y, z, vx, vy, vz = map(float, input(f"Введите декартовы координаты и проекции скорости {i+1}-го объекта (м/с): ").split())
    objects.append(FlyingObject(i+1, CartesianCoordinate(x, y, z), (vx, vy, vz)))

radar = Radar(radar_cartesian_coordinate)

for object in objects:
    object.spherical_coordinate = cartesian_to_spherical(object.cartesian_coordinate)

print("Текущие сферические координаты объектов:")
for object in objects:
    print(object)

time = float(input("Введите время в секундах: "))

for object in objects:
    move_object(object, time)

print(f"Сферические координаты объектов через {time} секунд:")
for object in objects:
    print(object)
