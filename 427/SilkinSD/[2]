import numpy as np
import random

# import random
# print(random.sample(range(1, 18), 4))
# Result: [7, 10, 2, 8]

list1 = [num for num in range(999999)]
random.shuffle(list1)

list2 = list(np.arange(-1, 1, 99999))

def list3():
    def get_point():
        r = 26 / 3
        while True:
            x = random.random() * r - r
            y = random.random() * r - r
            if x ** 2 + y ** 2 < r:
                point = complex(x, y) 
                return (point.real ** 2 + point.imag ** 2) ** 0.5
    return [get_point() for _ in range(42000)]
list3 = list3()

def get_list_4():
    text =(" Рассказ у нас пойдет в особенности о хоббитах, и любознательный читатель многое узнает об их нравах и кое-что из их истории. Самых любознательных отсылаем к повести под названием «Хоббит», где пересказаны начальные главы Алой Книги Западных Пределов, которые написал Бильбо Торбинс, впервые прославивший свой народец в большом мире. Главы эти носят общий подзаголовок «Туда и обратно», потому что повествуют о странствии Бильбо на восток и возвращении домой. Как раз по милости Бильбо хоббиты и угодили в самую лавину грозных событий, о которых нам предстоит поведать.
   Многие, однако, и вообще про хоббитов ничего не знают, а хотели бы знать – но не у всех же есть под рукой книга «Хоббит». Вот и прочтите, если угодно, начальные сведения о хоббитах, а заодно и краткий пересказ приключений Бильбо.
   Хоббиты – неприметный, но очень древний народец; раньше их было куда больше, чем нынче: они любят тишину и покой, тучную пашню и цветущие луга, а сейчас в мире стало что-то очень шумно и довольно тесно. Умелые и сноровистые, хоббиты, однако, терпеть не могли – не могут и поныне – устройств сложнее кузнечных мехов, водяной мельницы и прялки.
   Издревле сторонились они людей – на их языке Громадин, – а теперь даже и на глаза им не показываются. Слух у них завидный, глаз острый; они, правда, толстоваты и не любят спешки, но в случае чего проворства и ловкости им не занимать. Хоббиты привыкли исчезать мгновенно и бесшумно при виде незваной Громадины, да так наловчились, что людям это стало казаться волшебством. А хоббиты ни о каком волшебстве и понятия не имели: отроду мастера прятаться, они – чуть что – скрывались из глаз, на удивление своим большим и неуклюжим соседям.
   Они ведь маленькие, в полчеловека ростом, меньше даже гномов – пониже и не такие крепкие да кряжистые. Сейчас-то и трехфутовый хоббит – редкость, а раньше, говорят, все они были не очень уж малорослые. Согласно Алой Книге, Бандобрас Крол (Быкобор), сын Изенгрима Второго, был ростом четыре фута пять дюймов и сиживал верхом на лошади. Во всей хоббитской истории с ним могут сравниться лишь два достопамятных мужа древности; об их-то похождениях и повествуется в нашей хронике.
   Во дни мира и благоденствия хоббиты жили как жилось – а жилось весело. Одевались пестро, все больше в желтое и зеленое, башмаков не носили: твердые их ступни обрастали густой курчавой шерсткой, обычно темно-русой, как волосы на голове. Так что сапожное ремесло было у них не в почете, зато процветали другие ремесла, и длинные искусные пальцы хоббитов мастерили очень полезные, а главное – превосходные вещи. Лица их красотою не отличались, скорее добродушием – щекастые, ясноглазые, румяные, рот чуть не до ушей, всегда готовый смеяться, есть и пить. Смеялись до упаду, пили и ели всласть, шутки были незатейливые, еда по шесть раз на день (было бы что есть). Радушные хоббиты очень любили принимать гостей и получать подарки – и сами в долгу не оставались.
   Вероятно, хоббиты – наши прямые сородичи, не в пример ближе эльфов, да и гномов. Исстари говорили они на человеческом наречии, по-своему перекроенном, и во многом походили на людей. Но что у нас с ними за родство – теперь уж не выяснить. Хоббиты – порождение незапамятных дней Предначальной Эпохи. Одни эльфы хранят еще письменные предания тех канувших в прошлое древних времен, да и то лишь о себе – про людей там мало, а про хоббитов и вовсе не вспоминается. Так, никем не замеченные, хоббиты жили себе в Средиземье долгие века. В мире ведь полным-полно всякой чудной твари, и кому было какое дело до этих малюток? Но при жизни Бильбо и наследника его Фродо они вдруг, сами того ничуть не желая, стали всем важны и всем известны, и о них заговорили на Советах Мудрецов и Властителей.
   Третья эпоха Средиземья давно минула, и мир сейчас уж совсем не тот, но хоббиты живут там же, где жили тогда: на северо-западе Старого Света, к востоку от Моря. А откуда они взялись и где жили изначально – этого никто не знал уже и во времена Бильбо. Ученость была у них не в почете (разве что родословие), но в старинных семействах по-прежнему водился обычай не только читать свои хоббитские книги, но и разузнавать о прежних временах и дальних странах у эльфов, гномов и людей. Собственные их летописи начинались с заселения Хоббитании, и даже самые старые хоббитские были восходят к Дням Странствий, не ранее того. Однако же и по этим преданиям, и по некоторым словечкам и обычаям понятно, что хоббиты, подобно другим народам, пришли когда-то с востока.")
    return text.split()[:71910]

list_4 = get_list_4()


#1.1
def shaker_sort(arr):
    n = len(arr)
    swapped = True
    start = 0
    end = n - 1
    while swapped:
        swapped = False
        for i in range(start, end):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
        if not swapped:
            break
        swapped = False
        end -= 1
        for i in range(end - 1, start - 1, -1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
        start += 1
    return arr

#1.2
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

#1.3
def comp_sort(arr):
    gap = len(arr)
    shrink = 1.3
    sorted = False
    while not sorted:
        gap = int(gap / shrink)
        if gap <= 1:
            sorted = True
            gap = 1
        for i in range(len(arr) - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                sorted = False
    return arr

#1.4
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >=0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

#1.5
def shell_sort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

#1.6
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def tree_insert(root, key):
    if root is None:
        return Node(key)
    if key < root.key:
        root.left = tree_insert(root.left, key)
    else:
        root.right = tree_insert(root.right, key)
    return root

def in_order_traversal(root, result):
    if root:
        in_order_traversal(root.left, result)
        result.append(root.key)
        in_order_traversal(root.right, result)

def tree_sort(arr):
    root = None
    for key in arr:
        root = tree_insert(root, key)
    result = []
    in_order_traversal(root, result)
    return result
#1.7
def gnome_sort(arr):
    index = 0
    while index < len(arr):
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
    return arr

#1.8
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i+1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr
#1.10
def quick_sort(arr: list) -> list:
    result = arr
    if len(result) <= 1:
        return result
    else:
        q = random.choice(result)
        left_nums = []
        right_nums = []
        equal_nums = []
        for number in result:
            if number < q:
                left_nums.append(number)
            elif number > q:
                right_nums.append(number)
            else:
                equal_nums.append(number)
        return quick_sort(left_nums) + equal_nums + quick_sort(right_nums)


print(gnome_sort(list_1))
print(quick_sort(list_2))
print(buble_sort(list_3))
print(selection_sort(list_4))
